id: QRadar_v3 Full Search
version: -1
name: QRadar_v3 Full Search
description: This playbook runs a QRadar query and return its results to the context.
starttaskid: "0"
tasks:
  "0":
    id: "0"
    taskid: 3ec8570f-2cc0-4442-83fd-53007bbe8483
    type: start
    task:
      id: 3ec8570f-2cc0-4442-83fd-53007bbe8483
      version: -1
      name: ""
      iscommand: false
      brand: ""
      description: ''
    nexttasks:
      '#none#':
      - "1"
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 265,
          "y": 50
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "1":
    id: "1"
    taskid: 808e9101-5e6f-4f7d-84fe-5d5d293a620c
    type: regular
    task:
      id: 808e9101-5e6f-4f7d-84fe-5d5d293a620c
      version: -1
      name: Create QRadar Search
      description: Create a new asynchronous Ariel search. Returns search ID. Search
        status and results can be polled by sending search ID to 'qradar-search-status-get'
        and 'qradar-search-results-get' commands. Accepts SELECT query expressions
        only.
      script: '|||qradar-search-create'
      type: regular
      iscommand: true
      brand: ""
    nexttasks:
      '#none#':
      - "7"
    scriptarguments:
      query_expression:
        simple: ${inputs.query_expression}
      saved_search_id:
        simple: ${inputs.saved_search_id}
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 265,
          "y": 195
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "2":
    id: "2"
    taskid: 32c50d18-45e1-4d26-88e6-bb1aa080d756
    type: playbook
    task:
      id: 32c50d18-45e1-4d26-88e6-bb1aa080d756
      version: -1
      name: GenericPolling
      playbookName: GenericPolling
      type: playbook
      iscommand: false
      brand: ""
      description: ''
    nexttasks:
      '#none#':
      - "3"
    scriptarguments:
      AdditionalPollingCommandArgNames: {}
      AdditionalPollingCommandArgValues: {}
      Ids:
        simple: ${QRadar.Search.ID}
      Interval:
        simple: "1"
      PollingCommandArgName:
        simple: ids
      PollingCommandName:
        simple: qradar-search-status-get
      Timeout:
        simple: "10"
      dt:
        simple: QRadar.SearchStatus(val.Status != 'CANCELED' && val.Status != 'ERROR'
          && val.Status != 'COMPLETED').ID
    separatecontext: true
    loop:
      iscommand: false
      exitCondition: ""
      wait: 1
      max: 100
    view: |-
      {
        "position": {
          "x": 152.5,
          "y": 720
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "3":
    id: "3"
    taskid: d66c7cb8-7dd8-409b-86a2-8810a3387c3e
    type: regular
    task:
      id: d66c7cb8-7dd8-409b-86a2-8810a3387c3e
      version: -1
      name: Get QRadar Search Results
      description: Retrieves search results.
      script: '|||qradar-search-results-get'
      type: regular
      iscommand: true
      brand: ""
    nexttasks:
      '#none#':
      - "4"
    scriptarguments:
      output_path:
        simple: ${inputs.output_path}
      range: {}
      search_id:
        simple: ${QRadar.Search.ID}
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 265,
          "y": 895
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "4":
    id: "4"
    taskid: 0230e8b0-c494-4871-8273-770bfdc70d99
    type: condition
    task:
      id: 0230e8b0-c494-4871-8273-770bfdc70d99
      version: -1
      name: Check If Search Was Returned
      description: Checks if the given search have been completed before calling GenericPolling
        sub playbook.
      type: condition
      iscommand: false
      brand: ""
    nexttasks:
      '#default#':
      - "6"
      "yes":
      - "5"
    separatecontext: false
    conditions:
    - label: "yes"
      condition:
      - - operator: isNotEmpty
          left:
            value:
              simple: QRadar.Search.Result
            iscontext: true
    view: |-
      {
        "position": {
          "x": 265,
          "y": 1070
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "5":
    id: "5"
    taskid: e8bc431c-526a-4792-8318-f219dd6d304a
    type: title
    task:
      id: e8bc431c-526a-4792-8318-f219dd6d304a
      version: -1
      name: Done
      type: title
      iscommand: false
      brand: ""
      description: ''
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 480,
          "y": 1260
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "6":
    id: "6"
    taskid: b02cf2d9-93ab-4677-8b16-4dd3af24a497
    type: regular
    task:
      id: b02cf2d9-93ab-4677-8b16-4dd3af24a497
      version: -1
      name: Print Error Message
      description: Prints an error entry with a given message
      scriptName: PrintErrorEntry
      type: regular
      iscommand: false
      brand: ""
    scriptarguments:
      message:
        simple: QRadar search was not completed.
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 50,
          "y": 1245
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "7":
    id: "7"
    taskid: b9283f37-b8d4-4956-8418-445e058fed38
    type: regular
    task:
      id: b9283f37-b8d4-4956-8418-445e058fed38
      version: -1
      name: QRadar Get Search Status
      description: Retrieve status information for a search, based on the search ID
        parameter.
      script: '|||qradar-search-status-get'
      type: regular
      iscommand: true
      brand: ""
    nexttasks:
      '#none#':
      - "8"
    scriptarguments:
      search_id:
        simple: ${QRadar.Search.Status}
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 265,
          "y": 370
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "8":
    id: "8"
    taskid: 19a0d530-c16b-460f-8308-dcc38a3fc73f
    type: condition
    task:
      id: 19a0d530-c16b-460f-8308-dcc38a3fc73f
      version: -1
      name: 'Was Search Completed Immediately? '
      type: condition
      description: Check if QRadar search was completed immediately.
      iscommand: false
      brand: ""
    nexttasks:
      '#default#':
      - "2"
      "yes":
      - "3"
    separatecontext: false
    conditions:
    - label: "yes"
      condition:
      - - operator: isEqualString
          left:
            value:
              simple: QRadar.Search.Status
            iscontext: true
          right:
            value:
              simple: COMPLETED
    view: |-
      {
        "position": {
          "x": 265,
          "y": 545
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
view: |-
  {
    "linkLabelsPosition": {},
    "paper": {
      "dimensions": {
        "height": 1290,
        "width": 810,
        "x": 50,
        "y": 50
      }
    }
  }
inputs:
- key: query_expression
  value: {}
  required: false
  description: The AQL query to execute. Mutually exclusive with saved_search_id.
  playbookInputQuery:
- key: saved_search_id
  value: {}
  required: false
  description: Saved search ID to execute. Mutually exclusive with query_expression.
    Saved search ID is 'id' field returned by command 'qradar-saved-searches-list'.
  playbookInputQuery:
- key: output_path
  value: {}
  required: false
  description: Replaces the default context output path for the query result (QRadar.Search.Result).
    e.g. for output_path=QRadar.Correlations the result will be under the key 'QRadar.Correlations'
    in the context data.
  playbookInputQuery:
outputs: []
tests:
- test_Qradar
- test_Qradar_v2
- test_Qradar
- test playbook - QRadarCorrelations For V2
- QRadar_v3-test
- QRadar Indicator Hunting Test
- test playbook - QRadarCorrelations
fromversion: 6.0.0
